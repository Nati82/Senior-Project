// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Senior_Project.DataBase;

namespace Senior_Project.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Senior_Project.Models.Accounts.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GarageId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("approval")
                        .HasColumnType("INTEGER");

                    b.Property<string>("email")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("garageName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<float>("lattitude")
                        .HasColumnType("REAL");

                    b.Property<float>("longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("phoneNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Senior_Project.Models.Accounts.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("email")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("phoneNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Senior_Project.Models.Accounts.Garage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("available")
                        .HasColumnType("INTEGER");

                    b.Property<string>("email")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("garageName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("phoneNumber")
                        .HasColumnType("INTEGER");

                    b.Property<float>("rating")
                        .HasColumnType("REAL");

                    b.Property<bool>("removed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Garages");
                });

            modelBuilder.Entity("Senior_Project.Models.Accounts.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GarageId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("latitude")
                        .HasColumnType("REAL");

                    b.Property<float>("longitude")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("GarageId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Senior_Project.Models.Accounts.LogTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("loginTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("logoutTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("userRole")
                        .HasColumnType("TEXT");

                    b.Property<string>("username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LogTimes");
                });

            modelBuilder.Entity("Senior_Project.Models.Accounts.Mechanic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GarageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("email")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("phoneNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Mechanics");
                });

            modelBuilder.Entity("Senior_Project.Models.Accounts.SystemAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("phoneNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SystemAdmins");
                });

            modelBuilder.Entity("Senior_Project.Models.Notifications.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("customerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("mechanicId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("objectId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("received")
                        .HasColumnType("INTEGER");

                    b.Property<string>("sender")
                        .HasColumnType("TEXT");

                    b.Property<string>("type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("customerId");

                    b.HasIndex("mechanicId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Senior_Project.Models.Notifications.serviceAssistanceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("approval")
                        .HasColumnType("INTEGER");

                    b.Property<int>("customerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.Property<int>("garageId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("lattitude")
                        .HasColumnType("REAL");

                    b.Property<float>("longitude")
                        .HasColumnType("REAL");

                    b.Property<int>("mechanicId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("customerId");

                    b.HasIndex("garageId");

                    b.HasIndex("mechanicId");

                    b.ToTable("serviceAssistanceRequests");
                });

            modelBuilder.Entity("Senior_Project.Models.Services.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("additionalServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("estimatedPrice")
                        .HasColumnType("REAL");

                    b.Property<int?>("onGoingServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("removed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("serviceName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("additionalServiceId");

                    b.HasIndex("onGoingServiceId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Senior_Project.Models.Services.additionalService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("approved")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("expectedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("serviceFinished")
                        .HasColumnType("INTEGER");

                    b.Property<int>("statusOfVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("totalPrice")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("statusOfVehicleId");

                    b.ToTable("additionalServices");
                });

            modelBuilder.Entity("Senior_Project.Models.Services.onGoingService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("expectedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("serviceFinished")
                        .HasColumnType("INTEGER");

                    b.Property<int>("statusOfVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("totalPrice")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("statusOfVehicleId");

                    b.ToTable("onGoingServices");
                });

            modelBuilder.Entity("Senior_Project.Models.Vehicles.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("color")
                        .HasColumnType("TEXT");

                    b.Property<string>("countryCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("customerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("plateCode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("plateNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("vehicleType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("customerId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Senior_Project.Models.Vehicles.statusOfVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("approval")
                        .HasColumnType("INTEGER");

                    b.Property<int>("customerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("mechanicId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("vehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("statusOfVehicles");
                });

            modelBuilder.Entity("Senior_Project.Models.Accounts.Garage", b =>
                {
                    b.HasOne("Senior_Project.Models.Services.Service", null)
                        .WithMany("listOfGarages")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("Senior_Project.Models.Accounts.Location", b =>
                {
                    b.HasOne("Senior_Project.Models.Accounts.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Senior_Project.Models.Accounts.Garage", "Garage")
                        .WithMany()
                        .HasForeignKey("GarageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Garage");
                });

            modelBuilder.Entity("Senior_Project.Models.Notifications.Notification", b =>
                {
                    b.HasOne("Senior_Project.Models.Accounts.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Senior_Project.Models.Accounts.Mechanic", "mechanic")
                        .WithMany()
                        .HasForeignKey("mechanicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("mechanic");
                });

            modelBuilder.Entity("Senior_Project.Models.Notifications.serviceAssistanceRequest", b =>
                {
                    b.HasOne("Senior_Project.Models.Accounts.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Senior_Project.Models.Accounts.Garage", "garage")
                        .WithMany()
                        .HasForeignKey("garageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Senior_Project.Models.Accounts.Mechanic", "mechanic")
                        .WithMany()
                        .HasForeignKey("mechanicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("garage");

                    b.Navigation("mechanic");
                });

            modelBuilder.Entity("Senior_Project.Models.Services.Service", b =>
                {
                    b.HasOne("Senior_Project.Models.Services.additionalService", null)
                        .WithMany("listOfServices")
                        .HasForeignKey("additionalServiceId");

                    b.HasOne("Senior_Project.Models.Services.onGoingService", null)
                        .WithMany("listOfServices")
                        .HasForeignKey("onGoingServiceId");
                });

            modelBuilder.Entity("Senior_Project.Models.Services.additionalService", b =>
                {
                    b.HasOne("Senior_Project.Models.Vehicles.statusOfVehicle", "statusOfVehicle")
                        .WithMany()
                        .HasForeignKey("statusOfVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("statusOfVehicle");
                });

            modelBuilder.Entity("Senior_Project.Models.Services.onGoingService", b =>
                {
                    b.HasOne("Senior_Project.Models.Vehicles.statusOfVehicle", "statusOfVehicle")
                        .WithMany()
                        .HasForeignKey("statusOfVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("statusOfVehicle");
                });

            modelBuilder.Entity("Senior_Project.Models.Vehicles.Vehicle", b =>
                {
                    b.HasOne("Senior_Project.Models.Accounts.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("Senior_Project.Models.Services.Service", b =>
                {
                    b.Navigation("listOfGarages");
                });

            modelBuilder.Entity("Senior_Project.Models.Services.additionalService", b =>
                {
                    b.Navigation("listOfServices");
                });

            modelBuilder.Entity("Senior_Project.Models.Services.onGoingService", b =>
                {
                    b.Navigation("listOfServices");
                });
#pragma warning restore 612, 618
        }
    }
}
